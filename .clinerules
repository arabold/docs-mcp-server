# Cline Custom Instructions

- You must read the `README.md` to understand the project structure and setup.
- You must read the `ARCHITECTURE.md` file before making changes across multiple services.
- You must follow DRY, KISS, YAGNI, and SOLID principles.
- You must use the latest version of the programming language and libraries.
- Prefer the simplest solution.
- Never commit secrets, credentials, or sensitive data to the repository.
- When importing a relative path, avoid using file extensions like ".js" and ".ts".
- Update TSDoc for all classes, methods and functions. Focus on functionality and reasoning.
- NEVER document individual parameters or return values if their use can easily be derived from their name.
- When asked to check the documentation of a library, use the `search_docs` tool.

## Architecture

- Focus on system concepts and component relationships.
- Put implementation details in source code.
- Update `ARCHITECTURE.md` when the architecture changes.
- Do not use special characters like braces in mermaid diagram titles or names. Quote them if necessary.

## Git

- Branches must be created locally before pushing.
- Branch names must be prefixed with type (`feature/`, `bugfix/`, `chore/`) and include the issue number if available (e.g., `feature/1234-description`).
- All commit messages must use Conventional Commits (`feat:`, `fix:`, etc.).
- Commit subject must be imperative mood and â‰¤72 characters.
- If a commit body is present, add a blank line before it.
- Commit body (for non-trivial changes) must explain what and why, not how.
- Reference related issues in commit messages when relevant (e.g., `Closes #123`).
- Do not include unrelated changes in a single commit.
- Do not use vague or generic commit messages.
- Pull request descriptions must summarize the what and why of all changes in the branch (not just a list of commits or the how).
- Pull requests must target `main` unless specified otherwise.

## Typescript

- Install dependencies using `npm install`
- Prefer a specific type or `unknown` over `any`.
- Do not use non-null assertions (`!`). Use optional chaining (`?.`) or nullish coalescing (`??`).

## Logging Guidelines

- Use `console.*` for CLI user output (results, direct feedback).
- Use `logger.info/warn/error` for meaningful application events; prefix with a relevant emoji.
- Use `logger.debug` for detailed developer/tracing logs; no emoji prefix.
- Prefer `logger.debug` over `logger.info` for granular internal steps to reduce log verbosity.

## Web UI

- Use AlpineJS for frontend components and TailwindCSS for styling.
- Use TSX with kitajs for AlpineJS components.
- Use HTMX for server-side interactions.
